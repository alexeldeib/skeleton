# SaaS Template

Production-ready SaaS template with landing page, app frontend, and backend components.

## Structure

```
template/
├── landing/       # Marketing site (Next.js)
├── app/           # Application (Next.js)
├── supabase/      # Database, auth, edge functions
└── backend/       # Backend services (optional)
```

## Quick Start

### Standard Setup

```bash
# Clone repository
git clone https://github.com/yourusername/saas-template.git
cd saas-template

# Setup development environment
./setup.sh

# Start development servers
npm run dev
```

### Using devenv.sh (Recommended)

For a fully reproducible development environment, we support [devenv.sh](https://devenv.sh):

1. Install devenv.sh:
   ```bash
   curl -L https://get.devenv.sh/install.sh | bash
   ```

2. Install direnv (optional, for automatic activation):
   ```bash
   # macOS
   brew install direnv

   # Linux
   sudo apt install direnv  # Ubuntu/Debian
   sudo dnf install direnv  # Fedora
   ```

3. Clone and enter the repository:
   ```bash
   git clone https://github.com/yourusername/saas-template.git
   cd saas-template
   ```

4. If using direnv, allow it to load the environment:
   ```bash
   direnv allow
   ```

5. Or manually activate the environment:
   ```bash
   devenv shell
   ```

6. Run the setup script (first time only):
   ```bash
   setup
   ```

7. Start all development servers:
   ```bash
   devenv up
   ```

The devenv.sh environment provides everything needed to develop, test, and deploy the application, including Node.js, TypeScript, PostgreSQL, and Docker.
```

## Prerequisites

- Node.js 18+
- npm
- Git
- Docker (for local Supabase)
- Supabase CLI (`npm i -g supabase`)

## Features

- **Landing Page**: Modern marketing site with signup form
- **Application**: Protected dashboard with auth
- **Authentication**: Email magic link, Google, GitHub via Supabase
- **Database**: PostgreSQL with migrations
- **Edge Functions**: Serverless API endpoints

## Development

```bash
# Start all services
npm run dev

# Start specific component
cd landing && npm run dev # http://localhost:3000
cd app && npm run dev     # http://localhost:3001

# Local Supabase
cd supabase && supabase start
cd supabase && supabase stop
```

## Testing

```bash
# Run authentication tests
./run-auth-tests.sh

# Individual component tests
cd app && npm test
```

## Deployment

1. Authenticate with all services:
   ```bash
   supabase login
   vercel login
   ```

2. Run production setup:
   ```bash
   ./setup.sh --prod
   ```

## Documentation

- [Auth System](./docs/auth.md)
- [Database Schema](./docs/schema.md)
- [Deployment](./docs/deployment.md)

## License

MIT